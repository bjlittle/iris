What's New in Iris 2.0a0
************************

:Release: 2.0a0 (**alpha pre-release**)
:Date: 2017-06-XX


This document explains the new/changed features of Iris in version 2.0a0
(:doc:`View all changes <index>`).


Iris 2.0a0 Features
===================
.. _showcase:

.. admonition:: Showcase Feature - Dask Integration

  The use of `biggus`_ to provide support for *virtual arrays* and
  *lazy evaluation* within iris has been replaced with `dask`_.

  In addition the concept of *lazy data*, already used for the
  :class:`~iris.cube.Cube` data component, has now been extended to the data arrays in
  :class:`~iris.coords.Coord` s and :class:`~iris.aux_factory.AuxCoordFactory` s.

  This is a major feature enhancement, because basing Iris data in `dask`_
  allows iris to easily leverage its rich functionality and capabilities.
  In particular, dask's *threaded*, *multi-processor* or *distributed*
  `schedulers`_ can be used in order to fully exploit the available compute
  resource.

  For fuller details, see :doc:`"Real and Lazy Data" </whitepapers/real_and_lazy_data>`.

* Changes to the :class:`iris.cube.Cube`:

  * A :class:`~iris.cube.Cube` now accepts the *new* kwargs :data:`dtype` and
    :data:`fill_value`.

  * The :attr:`~iris.cube.Cube.copy` method now accepts the *new* kwargs
    :data:`dtype` and :data:`fill_value`.

  * The *new* :meth:`~iris.cube.Cube.core_data` method returns the *real* or
    *lazy* :class:`~iris.cube.Cube` :data:`data`.

  * The *new* :attr:`~iris.cube.Cube.fill_value` property (read-write) controls
    the :data:`fill_value` used for any masked :class:`~iris.cube.Cube`
    :data:`data`.

  * The *new* :meth:`~iris.cube.Cube.replace` method performs in-place
    replacement of :class:`~iris.cube.Cube` :data:`data`.

  * The *new* in-place arithmetic operators :data:`__iadd__`, :data:`__idiv__`,
    :data:`__imul__`, :data:`__isub__`, and :data:`__itruediv__` have been
    added to support :class:`~iris.cube.Cube` operations :data:`+=`,
    :data:`/=`, :data:`*=`, and :data:`-=`. Note that, for **divison**
    *__future__.division* is always in effect.

* Changes to the :class:`iris.coords.Coord`:

  * The *new* :attr:`~iris.coords.Coord.bounds_dtype` property (read-only)
    provides the :data:`dtype` of the coordinate bounds, if they exist.

  * The *new* :meth:`~iris.coords.Coord.core_points` and
    :meth:`~iris.coords.Coord.core_bounds` methods return the *real* or *lazy*
    :class:`~iris.coords.Coord` :data:`points` and :data:`bounds` data,
    respectively.

  * The *new* :meth:`~iris.coords.Coord.has_lazy_points` and
    :meth:`~iris.coords.Coord.has_lazy_bounds` boolean methods return whether
    the coordinate has *lazy* :data:`points` and *lazy* :data:`bounds` data,
    respectively.

  * The *new* :meth:`~iris.coords.Coord.lazy_points` and
    :meth:`~iris.coords.Coord.lazy_bounds` methods return *lazy*
    representations of the coordinate :data:`points` and :data:`bounds` data,
    respectively.


Bugs Fixed
==========

* Indexing or slicing an :class:`~iris.coords.AuxCoord` coordinate will return a coordinate with
  :data:`points` and :data:`bounds` data that are new copied arrays, rather than views onto those of
  the original parent coordinate.

* Indexing or slicing a cell measure will return a new cell measure with
  :data:`data` that is a new copied array, rather than a view onto the original parent cell measure.

* Performing an in-place arithmetic :func:`~iris.analysis.maths.add`,
  :func:`~iris.analysis.maths.divide`, :func:`~iris.analysis.maths.multiply`,
  or :func:`~iris.analysis.maths.subtract` operation on a
  :class:`~iris.cube.Cube` with :data:`integer` or :data:`boolean` data with
  a :data:`float` result will raise an :data:`ArithmeticError` exception.


Incompatible Changes
====================

* The :meth:`~iris.cube.Cube.lazy_data` method no longer accepts any arguments.


Deprecations
============

* The :mod:`iris.fileformats.grib` module previously deprecated in
  :doc:`Iris 1.10 </whatsnew/1.10>` has been reinstated. The use of the
  `iris_grib`_ package has now been deprecated.


Documentation Changes
=====================

* A new whitepaper on :doc:`Real and Lazy Data </whitepapers/real_and_lazy_data>`
  has been added, and referenced from key points in the :doc:`User Guide </userguide/index>` .


.. _biggus: https://biggus.readthedocs.io/en/latest/
.. _dask: http://dask.pydata.org/en/latest/
.. _iris_grib: https://github.com/SciTools/iris-grib/
.. _dask Array: http://dask.pydata.org/en/latest/array.html
.. _dask Bags: http://dask.pydata.org/en/latest/bag.html
.. _dask Delayed: http://dask.pydata.org/en/latest/delayed.html
.. _schedulers: http://dask.pydata.org/en/latest/scheduler-overview.html
